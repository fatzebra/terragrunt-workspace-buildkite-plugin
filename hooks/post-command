#!/bin/bash
set -euo pipefail

# Reads a list from plugin config into a global result array
# Returns success if values were read
function plugin_read_list_into_result() {
  result=()

  for prefix in "$@" ; do
    local i=0
    local parameter="${prefix}_${i}"

    if [[ -n "${!prefix:-}" ]] ; then
      echo "ðŸš¨ Plugin received a string for $prefix, expected an array" >&2
      exit 1
    fi

    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  done

  [[ ${#result[@]} -gt 0 ]] || return 1
}

MODULE_DIR="$(echo "${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_MODULE_DIR}" | sed 's/\/$//')"
FAIL_ON_NO_MODULES="${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_FAIL_ON_NO_MODULES-"true"}"

# Terragrunt extra args
if plugin_read_list_into_result BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_TERRAGRUNT_ARGS ; then
  terragrunt_args=()
  for arg in "${result[@]}" ; do
    args+=( "${arg}" )
  done
else 
  terragrunt_args=("")
fi

# look for the available terragrunt modules
if buildkite-agent meta-data exists "terragrunt-workspace-module-groups" ; then 
  module_groups="$(buildkite-agent meta-data get "terragrunt-workspace-module-groups")"
else
  # shellcheck disable=SC2068
  module_groups="$(terragrunt output-module-groups --terragrunt-working-dir "${MODULE_DIR}" ${terragrunt_args[@]})"
fi
discovered_modules_list="$(echo "${module_groups}" | jq -r '[keys[] as $k | .[$k] ]| flatten | .[]')"

discovered_modules=()

if [[ -z "${discovered_modules_list}" ]]; then
  printf "\U274C No modules disovered"
  if [[ "${FAIL_ON_NO_MODULES}" == "false"  ]]; then
    exit 0
  else 
    exit 1
  fi
fi

for module in ${discovered_modules_list}; do 
  discovered_modules+=("${module#*"${MODULE_DIR}"/}")
done

echo "Discovered modules - $(printf '%s ' "${discovered_modules[@]}")"

allowed_modules=()

# Filter based on the allowed modules
if plugin_read_list_into_result BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_ALLOWED_MODULES ; then
  allowed_modules=("${result[@]}")

  available_modules=()
  for discovered_module in "${discovered_modules[@]}"; do
    for allowed_module in "${result[@]}" ; do 
      if [[ "${discovered_module}" == "${allowed_module}" ]]; then 
        available_modules+=("${discovered_module}")
      fi
    done
  done

  echo "Modules after filtering - $(printf '%s ' "${available_modules[@]}")"
else 
  available_modules=("${discovered_modules[@]}")
  allowed_modules=("")
fi


# Split the data modules from the deploy modules
if plugin_read_list_into_result BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_DATA_MODULES ; then
  data_modules=()
  deploy_modules=()

  for available_module in "${available_modules[@]}"; do 
    if [[ "$(printf '|%s|' "${result[@]}")" == *"|${available_module}|"* ]] ; then 
      data_modules+=("${available_module}")
    fi
  done

  for available_module in "${available_modules[@]}"; do 
    if [[ "$(printf '|%s|' "${result[@]}")" != *"|${available_module}|"* ]] ; then 
      deploy_modules+=("${available_module}")
    fi
  done

  echo "Data modules - $(printf '%s ' "${data_modules[@]}")"
else
  deploy_modules=("${available_modules[@]}")
fi

echo "Modules for deployment - $(printf '%s ' "${deploy_modules[@]}")"

# Get the plugin settings for the source job so we can apply them - minus this one to the generated steps
step="$(buildkite-agent step get --format json)"

step_args=()
step_args+=("plugins: $(echo "${BUILDKITE_PLUGINS}" | jq -c '[.[] | select(keys[] | contains("terragrunt-workspace") != true )]')")
copy_params=("agents" "env" "notify")
for copy_param in "${copy_params[@]}"; do 
  if [[ -n "$( echo "${step}" | jq -r --arg copy_param "${copy_param}" 'if (.[$copy_param]) then .[$copy_param] else null end | select(.!=null)' )" ]]; then
    if [[ "${copy_param}" == "agents" ]]; then
      step_args+=("${copy_param}: $(echo "${step}" | jq -c '.agents | map({(. | split("=") | .[0]): (. | split("=") | .[1]) }) | add' )" )
    else
      step_args+=("${copy_param}: $(echo "${step}" | jq -c --arg copy_param "${copy_param}" '.[$copy_param]' )")
    fi
  fi
done
step_args=("$(printf '  %s\n' "${step_args[@]}")")

# Data Module Commands
refresh_commands=()
for module in "${data_modules[@]}" ; do
  refresh_commands+=("echo \"~~~ refreshing ${module}\"")
  refresh_commands+=("terragrunt refresh --terragrunt-working-dir \"${MODULE_DIR}/${module}\" ${terragrunt_args[@]}")
done

refresh_commands=("$(printf '    %s\n' "${refresh_commands[@]}")")

# Plan encryption command 
if [[ -n "${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_PLAN_ENCRYPTION_KMS_KEY_ARN-""}" ]] ; then
  plan_encryption_command="sops encrypt -i --kms \"${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_PLAN_ENCRYPTION_KMS_KEY_ARN}\" \".plans/\$\${module}\""
  plan_decryption_command="sops decrypt -i \".plans/\$\${module}\""
else
  plan_encryption_command=""
  plan_decryption_command=""
fi

BASE_PIPELINE="steps:"
PIPELINE="${BASE_PIPELINE}"

# Determine how to display the deployment
if (( ${#deploy_modules[@]} == 0 )); then 
  buildkite-agent annotate ":terragrunt: **${BUILDKITE_LABEL}**\nNo modules found for deployment" --style "warning" --context "${BUILDKITE_STEP_ID}"

  printf "\U274C No modules found for deployment"
  if [[ "${FAIL_ON_NO_MODULES}" == "false"  ]]; then
    exit 0
  else 
    exit 1
  fi
  
elif (( ${#deploy_modules[@]} == 1  )); then 
  # shellcheck disable=SC2124
  PIPELINE+="
- label: \":terragrunt: [${BUILDKITE_LABEL}] Setting Module to Deploy\"
  command: |- 
    buildkite-agent meta-data set modules \"${deploy_modules[@]}\"

- wait: ~
"

elif  (( ${#deploy_modules[@]} > 1 )); then

  PIPELINE+="
- block: \":terragrunt: [${BUILDKITE_LABEL}] Select Modules\"
  prompt: \"Select the modules to deploy\"
  fields: 
    - select: \"Modules\"
      key: \"modules\"
      multiple: true
      options: 
"

  for module in "${deploy_modules[@]}" ; do
    PIPELINE+="
      - value: \"${module}\"
"
  done
fi

# Create an annotation with the details of what we found
module_notes=(":mage: Discovered modules $(printf '\n  - %s' "${discovered_modules[@]}")")

if [[ -n "${data_modules[*]}" ]]; then
  module_notes+=(":chart_with_upwards_trend: Data modules $(printf '\n  - %s' "${data_modules[@]}")")
fi
if [[ -n "${allowed_modules[*]}" ]]; then 
  module_notes+=(":policeman: Allowed modules $(printf '\n  - %s' "${allowed_modules[@]}")")
fi
module_notes+=(":black_right_pointing_triangle_with_double_vertical_bar: Deploy modules $(printf '\n  - %s' "${deploy_modules[@]}")")

annotation=(
  ":terragrunt: **${BUILDKITE_LABEL}**"
  '<details><summary>Module Details</summary>'
  "${module_notes[@]}"
  '</details>'
)

printf '\n\n%s' "${annotation[@]}" | buildkite-agent annotate --style "info" --context "${BUILDKITE_STEP_ID}"

# shellcheck disable=SC2124
PIPELINE+="
- label: \":terragrunt: [${BUILDKITE_LABEL}] Plan Modules\"
  command: |-
    printf '\n\n%s' \"---\" | buildkite-agent annotate --append --context \"${BUILDKITE_STEP_ID}\"
    printf '\n\n%s' \":rocket: Selected modules\" | buildkite-agent annotate --append --context \"${BUILDKITE_STEP_ID}\"
${refresh_commands[@]}
    mkdir -p .plans
    for module in \$\$(buildkite-agent meta-data get modules); do
      echo \"+++ planning \$\${module}\"
      printf '\n%s' \"  - \$\${module}\" | buildkite-agent annotate --append --context \"${BUILDKITE_STEP_ID}\"
      terragrunt plan -out \"\$\${PWD}/.plans/\$\${module}\" --terragrunt-working-dir \"${MODULE_DIR}/\$\${module}\" ${terragrunt_args[@]}
      ${plan_encryption_command}
    done
    buildkite-agent artifact upload \".plans/**\"
${step_args[@]}

- block: \":terragrunt: [${BUILDKITE_LABEL}] Apply Changes?\"
  prompt: Apply changes?

- label: \":terragrunt: [${BUILDKITE_LABEL}] Apply Modules\"
  command: |-
${refresh_commands[@]}
    mkdir -p .plans
    buildkite-agent artifact download '.plans/**' .plans
    for module in \$\$(buildkite-agent meta-data get modules); do
      echo \"+++ applying \$\${module}\"
      ${plan_decryption_command}
      terragrunt apply --terragrunt-working-dir \"${MODULE_DIR}/\$\${module}\" ${terragrunt_args[@]} \"\$\${PWD}/.plans/\$\${module}\"
    done
${step_args[@]}
"

if [[ -n "${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_DEBUG_PIPELINE_OUTPUT-""}" ]]; then 
  echo ":bug: writing pipeline output"
  echo "${PIPELINE}" > "${BUILDKITE_PLUGIN_TERRAGRUNT_WORKSPACE_DEBUG_PIPELINE_OUTPUT}"
fi 

echo "${PIPELINE}" | buildkite-agent pipeline upload

